apiVersion: apps/v1
kind: Deployment
metadata:
  name: bankruptcy-prediction
  labels:
    app: bankruptcy-prediction
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: bankruptcy-prediction
  template:
    metadata:
      labels:
        app: bankruptcy-prediction
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api
        image: bankruptcy-prediction:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: API_HOST
          value: "0.0.0.0"
        - name: API_PORT
          value: "8000"
        - name: API_WORKERS
          value: "4"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENVIRONMENT
          value: "production"
        - name: ENABLE_METRICS
          value: "true"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: bankruptcy-prediction-secrets
              key: redis-url
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: model-storage
          mountPath: /app/outputs
          readOnly: true
        - name: logs
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: bankruptcy-prediction-models
      - name: logs
        emptyDir: {}
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: bankruptcy-prediction
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 30
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - bankruptcy-prediction
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bankruptcy-prediction-models
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bankruptcy-prediction
  labels:
    app: bankruptcy-prediction
automountServiceAccountToken: false

---
apiVersion: v1
kind: Secret
metadata:
  name: bankruptcy-prediction-secrets
type: Opaque
data:
  # Base64 encoded values
  redis-url: cmVkaXM6Ly9yZWRpcy1zZXJ2aWNlOjYzNzk=  # redis://redis-service:6379
  api-key: eW91ci1hcGkta2V5LWhlcmU=  # your-api-key-here