apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: bankruptcy-prediction-hpa
  labels:
    app: bankruptcy-prediction
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: bankruptcy-prediction
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "30"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: autoscaling/v2
kind: VerticalPodAutoscaler
metadata:
  name: bankruptcy-prediction-vpa
  labels:
    app: bankruptcy-prediction
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: bankruptcy-prediction
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: api
      maxAllowed:
        cpu: 2
        memory: 2Gi
      minAllowed:
        cpu: 100m
        memory: 128Mi
      controlledResources: ["cpu", "memory"]

---
# Pod Disruption Budget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: bankruptcy-prediction-pdb
  labels:
    app: bankruptcy-prediction
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: bankruptcy-prediction

---
# Custom Resource for monitoring scaling events
apiVersion: v1
kind: ConfigMap
metadata:
  name: hpa-scaling-config
  labels:
    app: bankruptcy-prediction
data:
  scaling-rules.yaml: |
    rules:
      - name: high_cpu_usage
        condition: cpu > 80%
        action: scale_up
        cooldown: 300s
      - name: high_memory_usage
        condition: memory > 85%
        action: scale_up
        cooldown: 300s
      - name: high_request_rate
        condition: requests_per_second > 1000
        action: scale_up
        cooldown: 180s
      - name: low_resource_usage
        condition: cpu < 30% AND memory < 40%
        action: scale_down
        cooldown: 600s
      - name: error_rate_spike
        condition: error_rate > 5%
        action: alert_only
        cooldown: 60s

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: bankruptcy-prediction-metrics
  labels:
    app: bankruptcy-prediction
spec:
  selector:
    matchLabels:
      app: bankruptcy-prediction
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# Prometheus Rule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: bankruptcy-prediction-alerts
  labels:
    app: bankruptcy-prediction
spec:
  groups:
  - name: bankruptcy-prediction
    rules:
    - alert: HighCPUUsage
      expr: avg(rate(container_cpu_usage_seconds_total{pod=~"bankruptcy-prediction-.*"}[5m])) * 100 > 80
      for: 5m
      labels:
        severity: warning
        service: bankruptcy-prediction
      annotations:
        summary: "High CPU usage detected"
        description: "CPU usage is above 80% for more than 5 minutes"
    
    - alert: HighMemoryUsage
      expr: avg(container_memory_usage_bytes{pod=~"bankruptcy-prediction-.*"} / container_spec_memory_limit_bytes{pod=~"bankruptcy-prediction-.*"}) * 100 > 85
      for: 5m
      labels:
        severity: warning
        service: bankruptcy-prediction
      annotations:
        summary: "High memory usage detected"
        description: "Memory usage is above 85% for more than 5 minutes"
    
    - alert: HighErrorRate
      expr: rate(http_requests_total{status=~"5.*",pod=~"bankruptcy-prediction-.*"}[5m]) / rate(http_requests_total{pod=~"bankruptcy-prediction-.*"}[5m]) * 100 > 5
      for: 2m
      labels:
        severity: critical
        service: bankruptcy-prediction
      annotations:
        summary: "High error rate detected"
        description: "Error rate is above 5% for more than 2 minutes"
    
    - alert: LowRequestThroughput
      expr: rate(http_requests_total{pod=~"bankruptcy-prediction-.*"}[5m]) < 1
      for: 10m
      labels:
        severity: warning
        service: bankruptcy-prediction
      annotations:
        summary: "Low request throughput"
        description: "Request rate is below 1 RPS for more than 10 minutes"
    
    - alert: PodCrashLooping
      expr: rate(kube_pod_container_status_restarts_total{pod=~"bankruptcy-prediction-.*"}[5m]) > 0
      for: 0m
      labels:
        severity: critical
        service: bankruptcy-prediction
      annotations:
        summary: "Pod is crash looping"
        description: "Pod {{ $labels.pod }} is restarting frequently"

---
# KEDA ScaledObject for advanced autoscaling
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: bankruptcy-prediction-scaledobject
  labels:
    app: bankruptcy-prediction
spec:
  scaleTargetRef:
    name: bankruptcy-prediction
  minReplicaCount: 2
  maxReplicaCount: 50
  pollingInterval: 30
  cooldownPeriod: 300
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service:9090
      metricName: http_requests_per_second
      threshold: '100'
      query: sum(rate(http_requests_total{job="bankruptcy-prediction"}[1m]))
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service:9090
      metricName: cpu_usage_percentage
      threshold: '70'
      query: avg(rate(container_cpu_usage_seconds_total{pod=~"bankruptcy-prediction-.*"}[1m])) * 100
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service:9090
      metricName: memory_usage_percentage
      threshold: '80'
      query: avg(container_memory_usage_bytes{pod=~"bankruptcy-prediction-.*"} / container_spec_memory_limit_bytes{pod=~"bankruptcy-prediction-.*"}) * 100